from . import exception
from typing import Generic, Hashable, Iterable, Iterator, Union, Tuple, TypeVar

_T = TypeVar('_T', bound=Hashable)


class DiGraph(Generic[_T]):
    def __init__(self) -> None: ...
    def add_node(self, node: _T) -> None: ...
    def add_edge(self, n1: _T, n2: _T) -> None: ...
    def add_edges_from(self, edges: Iterable[Tuple[_T, _T]]) -> None: ...
    def remove_node(self, node: _T) -> None: ...
    def remove_edge(self, n1: _T, n2: _T) -> None: ...
    def predecessors(self, n: _T) -> Iterator[_T]: ...
