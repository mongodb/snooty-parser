// Changes compared to mdast
// - Removed YAML
// - Removed FrontmatterContent
// - Removed ImageReference
// - Removed List.loose
// - Removed ListItem.checked
// - Removed BlockQuote because the built-in rst syntax is too easy to invoke by error
// - Add Directive
// - Add Role
// - Add Section
// - Add Target
// - Add DefinitionList and DefinitionListItem
// - Add Option
// - Change TableCell.children to be [BlockContent]
// - Add "align" and "width" attributes to Image

interface Parent <: UnistParent {
  children: [Content];
}

interface Literal <: UnistLiteral {
  value: string;
}

interface Option {
  key: string;
  value: string;
}

interface Root <: Parent {
  type: "root";
  options: [Option]?;
}

interface Paragraph <: Parent {
  type: "paragraph";
  children: [PhrasingContent];
}

interface Directive <: Parent {
  type: "directive";
  name: string;
  argument: [PhrasingContent];
  options: [Option]?;
}

interface Role <: Node {
  type: "role";
  name: string;
  target: string?;
  label: [PhrasingContent];
  raw: string
}

interface Section <: Parent {
  type: "section";
  children: [BlockContent];
}

interface Target <: Node {
  type: "target";
  ids: [string];
}

interface Heading <: Parent {
  type: "heading";
  children: [PhrasingContent];
}

interface ThematicBreak <: Node {
  type: "thematicBreak";
}

interface DefinitionList <: Parent {
  type: "definitionList";
  children: [DefinitionListItem];
}

interface DefinitionListItem <: Parent {
  type: "definitionListItem";
  term: [PhrasingContent]
  children: [BlockQuote];
}

interface List <: Parent {
  type: "list";
  ordered: boolean?;
  start: number?;
  children: [ListContent];
}

interface ListItem <: Parent {
  type: "listItem";
  children: [BlockContent];
}

interface Table <: Parent {
  type: "table";
  align: [alignType]?;
  children: [TableContent];
}

interface TableRow <: Parent {
  type: "tableRow";
  children: [RowContent];
}

interface TableCell <: Parent {
  type: "tableCell";
  children: [BlockContent];
}

interface HTML <: Literal {
  type: "html";
}

interface Code <: Literal {
  type: "code";
  lang: string?;
  caption: string;
  copyable: boolean;
  emphasize_lines: [(int, int)];
}

interface Definition <: Node {
  type: "definition";
}

Definition includes Association;
Definition includes Resource;

interface FootnoteDefinition <: Parent {
  type: "footnoteDefinition";
  children: [BlockContent];
}

FootnoteDefinition includes Association;

interface Text <: Literal {
  type: "text";
}

interface Emphasis <: Parent {
  type: "emphasis";
  children: [PhrasingContent];
}

interface Strong <: Parent {
  type: "strong";
  children: [PhrasingContent];
}

interface Delete <: Parent {
  type: "delete";
  children: [PhrasingContent];
}

interface InlineCode <: Literal {
  type: "inlineCode";
}

interface Break <: Node {
  type: "break";
}

interface Link <: Parent {
  type: "link";
  children: [StaticPhrasingContent];
}

Link includes Resource;

interface Image <: Node {
  type: "image";
  align: alignType?;
  width: string;
}

Image includes Resource;
Image includes Alternative;

interface LinkReference <: Parent {
  type: "linkReference";
  children: [StaticPhrasingContent];
}

LinkReference includes Reference;

interface Footnote <: Parent {
  type: "footnote";
  children: [PhrasingContent];
}

interface FootnoteReference <: Node {
  type: "footnoteReference";
}

FootnoteReference includes Association;

interface mixin Resource {
  url: string;
  title: string?;
}

interface mixin Association {
  identifier: string;
  label: string?;
}

interface mixin Reference {
  referenceType: string;
}

Reference includes Association;

interface mixin Alternative {
  alt: string?;
}

enum alignType {
  "left" | "right" | "center" | null;
}

enum referenceType {
  "shortcut" | "collapsed" | "full";
}

type Content =
  TopLevelContent | ListContent | TableContent | RowContent | PhrasingContent;

type TopLevelContent = BlockContent | DefinitionContent;

type BlockContent =
  Paragraph | Heading | Directive | ThematicBreak | List | Table | HTML | Code;

type DefinitionContent = Definition | FootnoteDefinition;

type ListContent = ListItem;

type TableContent = TableRow;

type RowContent = TableCell;

type PhrasingContent = StaticPhrasingContent | Role | Link | LinkReference;

type StaticPhrasingContent =
  Text | Emphasis | Strong | Delete | HTML | InlineCode | Break | Image |
  ImageReference | Footnote | FootnoteReference;
